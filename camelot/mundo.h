// Class automatically generated by Dev-C++ New Class wizard

#ifndef MUNDO_H
#define MUNDO_H

#include <allegro.h>
#include <iostream.h>
#include <string>

#include "defines.h"
#include "entradasortida.h"

using namespace std;

class tile 
{
    private:
        int value;
        int collisionable;
        int pintado;
        int position;

    public:
        tile()
        {
            value = 0;
            collisionable = 0;
            pintado = 0;
            position = 0;
        }
        ~tile() { ; }
        
        int  GetValue()                { return value;         }
        void SetValue(int val)         { value = val;          }
        int  GetCollisionable()        { return collisionable; }
        void SetCollisionable(int col) { collisionable = col;  }
        int  GetPosition()             { return position;      }
        void SetPosition(int pos)      { position = pos;       }                        
        int  GetPintado()              { return pintado;       }
        void SetPintado(int pint)      { pintado = pint;       }
};

class mundo
{
    private:
        entradaSortida io;
        
        int     screen_orig_x;
        int     screen_orig_y;
        int     screen_tiles_x;
        int     screen_tiles_y;
        int     screen_new_x;
        int     screen_new_y;
        int     tiles_orig_x;
        int     tiles_orig_y;
        int     tiles_m_x;
        int     tiles_m_y;
        int     tiles_size_x;
        int     tiles_size_y;
        int     tileSizeRatio;
        int     tiles_in_tiles_image_x;
        tile    ***tiles_mundo;
        int     num_scroll_planes;
        int     *scroll_size_x;
        int     *scroll_size_y;
        int     *scroll_vel_x;
        int     *scroll_vel_y;        
        int     num_scroll_planes_front;        
        int     *scroll_size_x_front;
        int     *scroll_size_y_front;
        int     *scroll_vel_front_x;
        int     *scroll_vel_front_y;        
        char    buffer[200], path_world_image[200];        
        BITMAP* world_image;
        BITMAP** scroll_planes;
        BITMAP** scroll_planes_front;
        
	public:		
		mundo();                        // class constructor		
    	mundo(char *file, bool b);      // class constructor		
		~mundo();                       // class destructor
		
		int GetScreenOrigX()  { return screen_orig_x;  }
		int GetScreenOrigY()   { return screen_orig_y;  }
		int GetScreenTilesX() { return screen_tiles_x; }
		int GetScreenTilesY() { return screen_tiles_y; }
		int GetTilesOrigX()   { return tiles_orig_x;   }
		int GetTilesOrigY()   { return tiles_orig_y;   }
		int GetTilesWorldX()  { return tiles_m_x;      }
		int GetTilesWorldY()  { return tiles_m_y;      }
		int GetTilesSizeX()   { return tiles_size_x;   }
		int GetTilesSizeY()   { return tiles_size_y;   }
		int GetScreenNewX()   { return screen_new_x;   }
		int GetScreenNewY()   { return screen_new_y;   }

		int   GetNumScrollPlanes()       { return num_scroll_planes; }		
   	    tile* GetTile(int x, int y)      { return tiles_mundo[y][x]; }
		int   GetTileValue(int x, int y) { return tiles_mundo[y][x]->GetValue(); }
		int   GetScrollSizeX(int i)      { return scroll_size_x[i];  }
		int   GetScrollSizeY(int i)      { return scroll_size_y[i];  }
		int   GetScrollVelX(int i)        { return scroll_vel_x[i];     }
		int   GetScrollVelY(int i)        { return scroll_vel_y[i];     }		

		int   GetNumScrollPlanesFront()       { return num_scroll_planes_front; }		
		int   GetScrollSizeXFront(int i)      { return scroll_size_x_front[i];  }
		int   GetScrollSizeYFront(int i)      { return scroll_size_y_front[i];  }
		int   GetScrollVelFrontX(int i)        { return scroll_vel_front_x[i];     }		
		int   GetScrollVelFrontY(int i)        { return scroll_vel_front_y[i];     }				
		
		
		BITMAP* GetWorldImage()               { return world_image; }
		BITMAP* GetScrollImage(int i)         { return scroll_planes[i]; }
		BITMAP* GetScrollImageFront(int i)    { return scroll_planes_front[i]; }		
		
		int   GetTileValueByCoord(int x, int y);
    	tile* GetTileByCoord(int x, int y);
    	
    	void SaveWorldInFile(char *file);
		
		int  GetTileSizeRatio() { return tileSizeRatio; }

    private:
            
        inline string chopToDirectory(char *file)
        {
             char copy_file[250];
             char *ptr;
             string token;
             string directory;
                 
             sprintf(copy_file, "%s", file);    
             ptr = strtok(file, "/\\");
             while( ptr != NULL )
             {
                    token = ptr;                        
                    ptr = strtok(NULL, "/\\"); 
                    if( ptr != NULL )
                    {
                        directory += (token + "/");
                    }
             }
             return directory;
        }
		
};

#endif // MUNDO_H
