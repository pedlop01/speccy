// Class automatically generated by Dev-C++ New Class wizard

#ifndef GAME_H
#define GAME_H

#include <allegro.h>
#include <iostream.h>
#include <fmod.h>
#include <fmod_dsp.h>
#include <fmod_errors.h>

#include <vector>

#include "defines.h"
#include "common-defines.h"
#include "entradaSortida.h"

#include "character.h"
#include "enemyhandler.h"
#include "checkpointhandler.h"
#include "mundo.h"
#include "symboltable.h"
#include "scripthandler.h"
#include "objecthandler.h"
#include "fxHandler.h"
#include "phase_info.h"
#include "watergraphicfx.h"
#include "scrollhandler.h"
#include "machinimiahandler.h"
#include "messageboxhandler.h"

#include "timer.h"


/*
 * No description
 */
class Game
{
    private:            
        // Global variables
        unsigned  buffer_num;
        BITMAP    *screenChk;
        BITMAP    *buffer[2];
        BITMAP    *screen_buffer[2];
        BITMAP*   sprite_image;      // FIXME: buscar la forma más eficiente en base a performance!
                                     // La mejor solución pasa por tener todos los sprites almacenados
                                     // previamente y tirar de ellos cuando sea necesario.
                                   
        symbolTable       globalSymbolTable;
        fxHandler         *soundHandler;
        ScrollHandler     scrHandler;
        machinimiaHandler *machinHandler;
        messageBoxHandler *msgBoxHandler;
        EnemyHandler      *enemyHandler;
        objectHandler     *objHandler;
        checkpointHandler *checkHandler;
        
        int     correct_scroll_x;
        int     correct_scroll_y;
        
        vector<phase_info*> phases;
        
        waterGraphicFx waterFx;
        
        unsigned int screen_x_orig;
        unsigned int screen_y_orig;
        unsigned int screen_x_size;
        unsigned int screen_y_size;
        
        // Lista pixels a pintar delante
        list<Coord4D> tilesFirstPlane;

        bool printScrollFront;    // remove this
        bool printScrollBack;    // and this                        
        
        Timer *timer;
        
        unsigned int current_phase;
        int lives;
        
	public:
		Game();
		~Game();
		
		void init();
        void deinit();
        
        inline Timer* getTimer() { return timer; }
        
        inline unsigned int setCurrentPhase(int c) { current_phase = c;    }
        inline unsigned int getCurrentPhase()      { return current_phase; }
        
		// Function to kill warrior by several events
        void FastKillWarrior(
             character* warrior, 
             EnemyHandler *enemyHandler, 
             checkpointHandler *checkHandler, 
             float &x, float &y);
        void ReadPhasesDescription();
        void basicScrollHandler(
             mundo *world, 
             int personaje_x, int personaje_y, 
             int &screen_x, int &screen_y, 
             int &pers_screen_x, int &pers_screen_y);
        void freeScrollHandler(
             mundo *world, 
             int teclado, 
             int personaje_x, int personaje_y, 
             int &screen_x, int &screen_y, 
             int &pers_screen_x, int &pers_screen_y);
        void scrollHandler(
             mundo *world, 
             int teclado, 
             int personaje_x, int personaje_y, 
             int &screen_x, int &screen_y, 
             int &pers_screen_x, int &pers_screen_y, 
             bool free_scroll);
        void drawScrollsBack(
             mundo *world, 
             BITMAP *buffer, 
             int screenIniX, int screenIniY);
        void drawScrollsFront(
             mundo *world, 
             BITMAP *buffer, 
             int screenIniX, int screenIniY);
        void drawWorld(
             mundo *world, 
             character* warrior, 
             BITMAP *buffer, 
             int screenIniX, int screenIniY);
        void drawWorldTilesFirstPlane(mundo *world, BITMAP *buffer);
        void drawScreen(
            mundo *world,
            character* warrior,    
            BITMAP *buffer,
            int screen_x,
            int screen_y,
            int screen_x_orig,
            int screen_y_orig,
            int pers_screen_x,
            int pers_screen_y,    
            bool rect,
            unsigned int mseg,
            bool checkpointImage);       
        int readKeyboard();
        
        int gameMain();
        
        void prepareMsgBox(character* warrior, 
             float &x, float &y, 
             bool warriorKilled, 
             unsigned int mseg, 
             messageBoxHandler *msgBox, 
             EnemyHandler      *enemyHandler,
             checkpointHandler *checkHandler,
             bool pause, bool esc);
};

#endif // GAME_H
