// Class automatically generated by Dev-C++ New Class wizard

#include "enemyhandler.h" // class's header file

// class constructor
EnemyHandler::EnemyHandler(symbolTablePtr _symbolTable, fxHandler* _soundHandler)
{
    numEnemies = 0;
    enemies.clear();
    
    symbTable = _symbolTable;
    soundHandler = _soundHandler;
}

// class destructor
EnemyHandler::~EnemyHandler()
{

    for( vector<enemigo*>::iterator it = enemies.begin() ; it != enemies.end() ; it++ )
    {
         delete *it;
    }
    enemies.clear();    
}

void EnemyHandler :: ReadEnemiesFile(char *file)
{
    char     aux_file[80];
    char     buffer[200];    
    enemigo* enemy;
    entradaSortida io;

    sprintf(aux_file, "%s", file);

    cout << "==============================================" << endl;       
    cout << " Reading enemies file " << aux_file << endl;
    
    io.obrirFitxer(aux_file, 0);
    
    string directory = chopToDirectory(aux_file);
    
    io.llegirParaula(buffer);    // Enemies
    io.llegirEnter(&numEnemies);
    cout << " Num enemies " << numEnemies << endl;
    
    for( unsigned int i = 0 ; i < numEnemies ; i++ )
    {
          int  id      = 0;
          int  estado  = 0;
          int  sentido = 0;
          int  s_vert  = 0;          
          int  pos_x   = 0;
          int  pos_y   = 0;
          int  desp_x  = 0;
          int  desp_y  = 0;
          int  type    = 0;
          int  vel     = 0;
          char afile[200];

          io.llegirEnter(&id);
          io.llegirEnter(&type);
          io.llegirEnter(&estado);
          io.llegirEnter(&sentido);
          io.llegirEnter(&s_vert);  
          io.llegirEnter(&pos_x);
          io.llegirEnter(&pos_y);
          io.llegirEnter(&desp_x);
          io.llegirEnter(&desp_y);          
          io.llegirEnter(&vel);          
          io.llegirParaula(afile);
          
          if( sentido == ENEMIGO_SENTIDO_IZQUIERDA )
          {
              desp_x = -desp_x;
          }
          if( s_vert == ENEMIGO_NO_SENTIDO_VERTICAL_ARRIBA )
          {
              desp_y = -desp_y;
          }          
          
          string aux(afile);
          string animation_file = directory + aux;
          enemy = new enemigo(symbTable, soundHandler, id, type, estado, sentido, s_vert, pos_x, pos_y, desp_x, desp_y, vel, animation_file.c_str());
          enemy->SetOrigFile(aux);
          enemies.push_back(enemy);
          
          cout << "\t Enemy " << i 
               << " tipo " << type
               << " estado " << estado 
               << " sentido " << sentido 
               << " sentido_vertical " << s_vert
               << " x " << pos_x 
               << " y " << pos_y 
               << " desp_x " << desp_x
               << " desp_y " << desp_y
               << " animation_file " << afile << endl;
    }
    cout << "==============================================" << endl;    
}

void EnemyHandler :: SaveEnemiesFile(char *file)
{
    char     buffer[200];    
    enemigo* enemy;
    entradaSortida io;

    cout << "==============================================" << endl;       
    cout << " Saving enemies file " << file << endl;
    
    io.obrirFitxer(file, ESCRIPTURA);
    
    string directory = chopToDirectory(file);
    
    io.escriureParaula("num_enemies ");
    io.escriureEnter(enemies.size());
    io.escriureEspai();
    io.escriureSaltDeLinia();
       
    for( vector<enemigo*>::iterator it = enemies.begin() ; it != enemies.end() ; it++ )
    {
          enemy = *it;
          io.escriureEnter(enemy->GetId());
          io.escriureEspai();
          io.escriureEnter(enemy->GetEnemyType());
          io.escriureEspai();
          io.escriureEnter(enemy->GetIniState());
          io.escriureEspai();
          io.escriureEnter(enemy->GetIniSentido());
          io.escriureEspai();
          io.escriureEnter(enemy->GetIniSentidoVertical());
          io.escriureEspai();
          io.escriureEnter(enemy->GetIniX());
          io.escriureEspai();
          io.escriureEnter(enemy->GetIniY());
          io.escriureEspai();          
          io.escriureEnter(enemy->GetDespX());
          io.escriureEspai();
          io.escriureEnter(enemy->GetDespY());
          io.escriureEspai();          
          io.escriureEnter(enemy->GetVel());
          io.escriureEspai();
          io.escriureParaula(enemy->GetOrigFile());
          io.escriureEspai();         
          io.escriureSaltDeLinia();          
    }
    
    io.tancarFitxer();
    cout << "==============================================" << endl;    
}



void EnemyHandler :: KillEnemy(mundo* world, BITMAP* buffer, character* warrior, enemigo* enemy, int x, int y)
{
    int sign = (warrior->GetSentido() ? 4*29 : -45);    
    
//    line(buffer, 0, 0, warrior->GetCurrentX() + sign - x, warrior->GetCurrentY() + 4*8 - y, 0xFFFF);
//    rect(buffer, enemy->GetCurrentX() - x, enemy->GetCurrentY() - y, enemy->GetCurrentX() + 4*enemy->GetCurrentSizeX() - x, enemy->GetCurrentY() + 4*enemy->GetCurrentSizeY() - y, 0xFFFF);
//    rect(buffer, warrior->GetCurrentX() - x + 25, warrior->GetCurrentY() - y + 25, warrior->GetCurrentX() + 4*warrior->GetCurrentSizeX() - x - 25, warrior->GetCurrentY() + 4*warrior->GetCurrentSizeY() - y - 25, 0xFFFF);            
    if( warrior->SwordCollision(world, enemy->GetCurrentX(), enemy->GetCurrentY(), enemy->GetCurrentSizeX(), enemy->GetCurrentSizeY()) )
    {
        enemy->KillEnemy();
    }
}

void EnemyHandler :: EnemyRessurection(unsigned int mseg, enemigo* enemy)
{
     if( (enemy->GetCurrentState() == ENEMIGO_MUERTO) && abs(mseg - enemy->GetDeadTime()) > 5000 )   // FIXME
     {
         enemy->SetStateToInitial();
     }
}

bool EnemyHandler :: EnemyKillWarrior(BITMAP* buffer, mundo* world, character* warrior, int x, int y)
{
     enemigo* enemy = NULL;
     
     for( int i = 0 ; i < numEnemies ; i++ )
     {
         enemy = enemies[i];     

         if( enemy->IsAlive() && warrior->EnemyCollision(buffer, world, enemy->GetCurrentXCompleteSprite(), enemy->GetCurrentY(), enemy->GetCurrentSizeX(), enemy->GetCurrentSizeY(), x, y) )
         {
             soundHandler->playSound(5);
             return true;
         }
     }
     
     return false;
}

void EnemyHandler :: HandleEnemiesState(BITMAP* buffer, mundo* world, character* warrior, unsigned int mseg, int x, int y)
{
     enemigo* enemy = NULL;
     
     for( int i = 0 ; i < enemies.size() ; i++ )
     {
         enemy = enemies[i];
         assert( enemy != NULL );

         this->EnemyRessurection(mseg, enemy);    
         if( enemy->GetReset() )
             enemy->SetStateToInitial();
         if( !enemy->GetActivated() )
             continue;

         this->KillEnemy(world, buffer, warrior, enemy, x, y);         

         // Enemy activated
         for( int vel = 0 ; vel < enemy->GetVelocity() ; vel++ )
         {                                   
             enemy->handleState(warrior, mseg);
             enemy->computeNewPositionUsingCollisionDetection(world, mseg);         
         }
     }
}

void EnemyHandler :: DrawEnemiesInScreen(BITMAP* buffer, mundo* world, int screen_x, int screen_y, int size_x, int size_y)
{
    enemigo *enemy = NULL;
    
    for( int i = 0 ; i < enemies.size() ; i++ )
    {
        enemy = enemies[i];
        if( screen_x <= enemy->GetCurrentX() + 100 && screen_x + size_x >= enemy->GetCurrentX() &&
            screen_y <= enemy->GetCurrentY() + 100 && screen_y + size_y >= enemy->GetCurrentY() &&
            enemy->GetActivated() ) // FIXME
        {            
            enemy->drawCharacterInWorld(world, buffer, enemy->GetCurrentX() - screen_x, enemy->GetCurrentY() - screen_y);
        }     
    }
}

void EnemyHandler :: AllEnemiesToInitialState()
{
     enemigo* enemy = NULL;
     
     for( int i = 0 ; i < numEnemies ; i++ )
     {
         enemy = enemies[i];
         enemy->SetStateToInitial();         
     }
}
