// Class automatically generated by Dev-C++ New Class wizard

#include "scripthandler.h" // class's header file

// class constructor
scriptHandler::scriptHandler(symbolTablePtr _symbolTable)
{
    smbTable = _symbolTable;
}

// class destructor
scriptHandler::~scriptHandler()
{
   for( list<script*>::iterator it = scripts.begin() ; it != scripts.end() ; it++ )
   {
        delete *it;
   }
   scripts.clear();
}

bool scriptHandler :: ReadScriptsFile(char* file)
{
   char buffer[200];     
   int num_scripts, num_input_vars, num_output_vars;
   int x, y, size_x, size_y;   
   entradaSortida scriptFile;
        
   scriptFile.obrirFitxer(file, LECTURA);

   // num scripts
   scriptFile.llegirParaula(buffer);
   scriptFile.llegirEnter(&num_scripts);
    
   printf("==============================================\n");
   printf(" Reading scripts... num = %d\n", num_scripts);
   
   for( unsigned int i = 0 ; i < num_scripts ; i++ )
   {       
       printf(" Script number %d\n", i);
       scriptFile.llegirEnter(&x);
       scriptFile.llegirEnter(&y);
       scriptFile.llegirEnter(&size_x);
       scriptFile.llegirEnter(&size_y);
       
       printf("\t coord (%d, %d, %d, %d)\n", x, y, size_x, size_y);

       script *scrpt = new script(smbTable);
       scrpt->addTriggerCoords(x, y, size_x, size_y);
       
       scriptFile.llegirParaula(buffer);
       scriptFile.llegirEnter(&num_input_vars);
       printf("\t input vars %d\n", num_input_vars);
       for( unsigned int j = 0 ; j < num_input_vars ; j++ )
       {
            int value;
            
            scriptFile.llegirParaula(buffer);
            scriptFile.llegirEnter(&value);
            
            string var_name(buffer);
            
            printf("\t\t input var %d: name=%s value=%d\n", j, buffer, value);
            
            scrpt->addNewInputVar(var_name, value);
       }       

       scriptFile.llegirParaula(buffer);       
       scriptFile.llegirEnter(&num_output_vars);       
       printf("\t output vars %d\n", num_output_vars);
       for( unsigned int j = 0 ; j < num_output_vars ; j++ )
       {
            char buffer[200];
            int value;
            
            scriptFile.llegirParaula(buffer);
            scriptFile.llegirEnter(&value);
            
            string var_name(buffer);            
            
            printf("\t\t output var %d: name=%s value=%d\n", j, buffer, value);
            
            scrpt->addNewOutputVar(var_name, value);
       }       
       
       scripts.push_back(scrpt);
   }   
   printf("==============================================\n");   
}

void scriptHandler :: SaveScriptsFile(char* file)
{
   char           buffer[300];     
   entradaSortida scriptFile;
        
   scriptFile.obrirFitxer(file, ESCRIPTURA);

   // num scripts
   scriptFile.escriureParaula("num_scripts ");
   scriptFile.escriureEnter(scripts.size());
   scriptFile.escriureEspai();
   scriptFile.escriureSaltDeLinia();
    
   printf("==============================================\n");   
   printf(" Saving scripts... num = %d\n", scripts.size());
   
   int i = 0;
   for( list<script*>::iterator it = scripts.begin() ; it != scripts.end() ; it++ )
   {       
       script* scprt = *it;
           
       scriptFile.escriureEnter(scprt->GetX());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();
       scriptFile.escriureEnter(scprt->GetY());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();       
       scriptFile.escriureEnter(scprt->GetSizeX());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();
       scriptFile.escriureEnter(scprt->GetSizeY());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();

       scriptFile.escriureParaula("input_vars ");
       scriptFile.escriureEnter(scprt->GetInputVars()->size());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();

       for( map<string, unsigned int>::iterator it_input_var = scprt->GetInputVars()->begin() ; it_input_var != scprt->GetInputVars()->end() ; it_input_var++ )
       {
            sprintf(buffer, "%s", it_input_var->first.c_str());
            
            scriptFile.escriureParaula(buffer);
            scriptFile.escriureEspai();
            scriptFile.escriureEnter(it_input_var->second);
            scriptFile.escriureEspai();
            scriptFile.escriureSaltDeLinia();
       }       
       
       scriptFile.escriureParaula("output_vars ");
       scriptFile.escriureEnter(scprt->GetOutputVars()->size());
       scriptFile.escriureEspai();
       scriptFile.escriureSaltDeLinia();

       for( map<string, unsigned int>::iterator it_output_var = scprt->GetOutputVars()->begin() ; it_output_var != scprt->GetOutputVars()->end() ; it_output_var++ )
       {
            sprintf(buffer, "%s", it_output_var->first.c_str());
            scriptFile.escriureParaula(buffer);
            scriptFile.escriureEspai();
            scriptFile.escriureEnter(it_output_var->second);       
            scriptFile.escriureEspai();
            scriptFile.escriureSaltDeLinia();       
       }   
           
       i++;
   }   
   
   scriptFile.tancarFitxer();
   printf("==============================================\n");   
}

void scriptHandler :: AnalyzeScripts(int x, int y, int xSize, int ySize)
{
    int i = 0;
    for( list<script*>::iterator it = scripts.begin() ; it != scripts.end() ; it++ )
    {        
         int script_x = (*it)->GetX();
         int script_y = (*it)->GetY();    
         int script_size_x = (*it)->GetSizeX();
         int script_size_y = (*it)->GetSizeY();      
               
         if( (x <= script_x + script_size_x) &&
             (y <= script_y + script_size_y) &&
             (x /*+ xSize*/ >= script_x)         &&
             (y /*+ ySize*/ >= script_y) )
         {
             (*it)->checkInputVars();
         }
         i++;
    }
}
